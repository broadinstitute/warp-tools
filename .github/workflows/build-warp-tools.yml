
name: Warp Tools CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "develop" and "master" branch
  # Uncomment this block and add your branch name to test without creating a PR
  #push:
    #branches: [ "kp_github_actions_pd-2113" ] 
    #paths-ignore:
    #  - '**/README.md'
  pull_request:
    branches: [ "develop", "master" ]
    paths-ignore:
      - '**/README.md'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker Image Tag (default: branch_name)' 

env:
  PROJECT_NAME: WARP Tools
  # Github repo name
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  # Region-specific Google Docker repository where GOOGLE_PROJECT/REPOSITORY_NAME can be found
  DOCKER_REGISTRY: us.gcr.io
  GCR_PATH: broad-gotc-prod/warp-tools
  TAG: ${{ github.event.inputs.image_tag || github.head_ref || github.ref_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The job that builds our container
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      imagePath: ${{ steps.saveImagePath.outputs.url }}
    steps:
    # Save the image path to an output
    - id: 'saveImagePath'
      run: echo "url=${DOCKER_REGISTRY}/${GCR_PATH}:${TAG}" >> $GITHUB_OUTPUT
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${DOCKER_REGISTRY}/${GCR_PATH}:${TAG}
    # Log into the Google Docker registry
    - id: 'Auth'
      name: Login to GCR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: _json_key
        password: ${{ secrets.GCR_CI_KEY }}
    # Push the image to the Google Docker registry
    - name: Push image
      run: "docker push ${DOCKER_REGISTRY}/${GCR_PATH}:${TAG}"
    # # Upload the image to the artifacts store
    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: warptools
    #     path: /tmp/warptools.tar
  
  test-python:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with ruff
        run: |
          # default set of ruff rules with GitHub Annotations
          ruff --format=github --target-version=py37 .
        continue-on-error: true
      - name: Test with pytest
        run: |
          pytest
  
  # test-c:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Install gtest manually
  #     run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
  #   - uses: actions/checkout@v1
  #   - name: configure
  #     run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-Werror" ..
    # - name: make
    #   run: cd build && make
    # - name: Run Test
    #   run: /home/runner/work/github_actions_gtest_example/github_actions_gtest_example/build/test/github_actions_gtest_example.test

  test-c:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{needs.build.outputs.imagePath}}
      # volumes:
      #   - my_docker_volume:/volume_mount
      # options: --cpus 1
    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      - name: Test TagSort
        run: |
          pwd
          /warptools/TagSort
          ./fetch_gtest.sh && make test
